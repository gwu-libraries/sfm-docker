# For information on installation and configuration, see http://sfm.readthedocs.io/en/latest/install.html.

# Note that changes made to this file AFTER SFM is brought up will require one or
# containers to be restarted for the changes to go into effect.
# For more information, see http://sfm.readthedocs.io/en/latest/install.html#configuration

# COMMON CONFIGURATION
TZ=America/New_York
COMPOSE_PROJECT_NAME=sfm


# VOLUME CONFIGURATION
# Volumes come in 2 types: normal Docker volumes (e.g., /sfm-mq-data)
# or host volumes (which link to an external location; e.g., /src/sfm-mq-data:/sfm-mq-data).
# A config example to use a docker volume: DATA_VOLUME_MQ=/sfm-mq-data
# A config example to use an external location: DATA_VOLUME_MQ=/mnt/external-mq:/sfm-mq-data
# An internal volume should be adequate for development; for production,
# you probably want to use a link to an external location.
# Note that the external location should be created before SFM is brought up.
# The data volume is where:
# * all of harvested social media content is stored (internally used /sfm-collection-set-data, /sfm-containers-data, /sfm-export-data).
# * the db files are located (internally used /sfm-db-data).

# the MQ container uses its own local volume
DATA_VOLUME_MQ=/sfm-mq-data

# In case a local database is used, its data is stored under the following docker volume
# In case a remote database is used this could point to a mounted folder where the DB stores its data,
# otherwise it will not be used
DATA_VOLUME_DB=/sfm-db-data

# sensitive export data stored remoteley on a server mounted using sshfs
DATA_VOLUME_EXPORT=/mnt/my-ssh-drive:/sfm-export-data

# possibly sensitive data of harvesting containers stored remoteley on a server mounted using sshfs
DATA_VOLUME_CONTAINERS=/mnt/my-ssh-drive:/sfm-containers-data

# sensitive data about collection sets stored remoteley on a server mounted using sshfs
DATA_VOLUME_COLLECTION_SET=/mnt/my-ssh-drive:/sfm-collection-set-data


# The processing volume is where processed data is stored when using a processing
# container. Use porcessing.docker-compose.yml to start a processing container.
PROCESSING_VOLUME=/sfm-processing
#PROCESSING_VOLUME=/src/sfm-processing:/sfm-processing
# sfm-data free space threshold to send notification emails,only ends with MB,GB,TB. eg. 500MB,10GB,1TB
DATA_VOLUME_THRESHOLD=10GB
# sfm-processing free space threshold to send notification emails,only ends with MB,GB,TB. eg. 500MB,10GB,1TB
PROCESSING_VOLUME_THRESHOLD=10GB
# Group id for sfm group
SFM_GID=990
# User id for sfm user
SFM_UID=990


# DOCKER LOG CONFIGURATION
# This limits the size of the logs kept by Docker for each container.
# For more information, see https://docs.docker.com/engine/admin/logging/overview/#json-file-options
DOCKER_LOG_MAX_SIZE=50m
DOCKER_LOG_MAX_FILE=4

# SFM UI CONFIGURATION
# This is the public hostname and port. It is used for Django's ALLOWED_HOSTS
# and for links in emails.
# For production, this must be set correctly or you will get a bad request (400).
SFM_HOSTNAME=localhost
# When using HTTPS, this should be set to 8080
SFM_PORT=8080
# Set to True when using HTTPS. The nginx-proxy container must also be uncommented in your docker-compose.yml
SFM_USE_HTTPS=False
# Set to True when using AWS Elastic Load Balancer. This will allow the ELB health check to work correctly with ALLOWED_HOSTS.
SFM_USE_ELB=False

# Provide your institution name display on SFM UI's footer
SFM_INSTITUTION_NAME=Your Institution Libraries
# Provide your institution link
SFM_INSTITUTION_LINK=https://library.yourinstitution.edu

# Set to True to enable the cookie consent popup
SFM_ENABLE_COOKIE_CONSENT=False
# Provide the text you would like to appear on the cookie popup
SFM_COOKIE_CONSENT_HTML=<b>Do you like cookies?</b> &#x1F36A; We use cookies to ensure you get the best experience on our website. <a href="https://cookiesandyou.com/" target="_blank">Learn more</a>
# Provide the wording you would like to appear on the cookie button
SFM_COOKIE_CONSENT_BUTTON_TEXT=I consent

# Set to True to enable the GW footer
SFM_ENABLE_GW_FOOTER=False

# How often to perform monitoring checks
SFM_MONITOR_QUEUE_HOUR_INTERVAL=12
SFM_SCAN_FREE_SPACE_HOUR_INTERVAL=12

# To send email, set these correctly.
# For GW users, ask for the password for sfm_no_reply@email.gwu.edu.
SFM_SMTP_HOST=smtp.gmail.com
SFM_EMAIL_USER=sfm_no_reply@email.gwu.edu
SFM_EMAIL_PASSWORD=password
# Optional email to send email from. If omitted, SFM_EMAIL_USER is used.
# For AWS SES, SFM_EMAIL_USER is different from SFM_EMAIL_FROM and SFM_EMAIL_FROM must be a verified account.
# SFM_EMAIL_FROM=sfm_no_reply@email.gwu.edu

# To enable connecting to social media accounts, provide the following.
# They are not necessary.
# If you modify credentials after the first startup of SFM, delete existing entries in
# the SFM admin under Social Applications.
#TWITTER_CONSUMER_KEY=mBbq9ruffgEcfsktgQztTHUir8Kn0
#TWITTER_CONSUMER_SECRET=Pf28yReB9Xgz0fpLVO4b46r5idZnKCKQ6xlOomBAjD5npFEQ6Rm
#WEIBO_API_KEY=13132044538
#WEIBO_API_SECRET=68aea49fg26ea5072ggec14f7c0e05a52
#TUMBLR_CONSUMER_KEY=Fki09cW957y56h6fhRtCnig14QhpM0pjuHbDWMrZ9aPXcsthVQq
#TUMBLR_CONSUMER_SECRET=aPTpFRE2O7sVl46xB3difn8kBYb7EpnWfUBWxuHcB4gfvP

# Turn on or off the Weibo search when deployment
# make sure you have an access_token to access the advanced weibo API (search/topic)
# for details, please go to https://goo.gl/jA0kyc
SFM_WEIBO_SEARCH_OPTION=False

# For automatically created admin account
SFM_SITE_ADMIN_NAME=sfmadmin
SFM_SITE_ADMIN_EMAIL=nowhere@example.com
SFM_SITE_ADMIN_PASSWORD=password

# A contact email at your institution that is provided to users.
# It is not necessary.
# SFM_CONTACT_EMAIL=sfm@yourinstitution.edu

# RABBIT MQ CONFIGURATION
SFM_RABBITMQ_HOST=mq
SFM_RABBITMQ_PORT=5672
SFM_RABBITMQ_USER=sfm_user
SFM_RABBITMQ_PASSWORD=password
SFM_RABBITMQ_MANAGEMENT_PORT=15672

# DB CONFIGURATION
SFM_POSTGRES_USER='postgres'
SFM_POSTGRES_DB='sfmdatabase'

# The DB host may point to any valid IP address or hostname
# thus for example can also point to a SSH tunnel reachable from the used Docker network
SFM_POSTGRES_HOST=db
SFM_POSTGRES_PORT=5432
SFM_POSTGRES_PASSWORD=password

# HARVESTER CONFIGURATION
# *_TRIES is the number of time to try harvests.
# Setting to more than 1 causes retries on errors. Setting to 0 causes
# infinite retries.
TWITTER_REST_HARVEST_TRIES=3
TWITTER_STREAM_HARVEST_TRIES=3
TUMBLR_HARVEST_TRIES=3
WEIBO_HARVEST_TRIES=3
FLICKR_HARVEST_TRIES=3

## DEVELOPMENT-ONLY CONFIGURATION.
# When using prod.docker-compose.yml, these are ignored.
DEBUG=True
DEBUG_WARCPROX=False

# Set to "release" to use released version of sfm-utils and warcprox.
# Set to "master" to use master version of sfm-utils.
# Set to "dev" to link in a local sfm-utils running in development mode. A host volume must also be added
# for the container in docker-compose.yml. (See the commented out volumes section in docker-compose.yml.)
UI_REQS=master
TWITTER_REQS=master
FLICKR_REQS=master
TUMBLR_REQS=master
WEIBO_REQS=master
# Set to false to skip pip upgrading requirements. This will allow SFM to start up faster
# and work offline, but will not get the latest requirements.
UPGRADE_REQS=True

# SFM UI DEVELOPMENT CONFIGURATION
# "master-runserver" to run with SFM UI runserver. "master" to run SFM UI with Apache.
UI_TAG=master-runserver
# To have some test accounts created.
LOAD_FIXTURES=True
# This adds a 5 minute schedule option to speed testing.
FIVE_MINUTE_SCHEDULE=True
# This adds a 100 item export option for testing.
HUNDRED_ITEM_SEGMENT=True
